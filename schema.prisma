// This file is generated by FUSEBLE.inc CLI

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// enum.prisma

enum CommerceDeliveryType {
  FREE
  PAID
  COLLECT
}

enum CommerceTaxType {
  TAX // 과세
  NO_TAX // 비과세
  ZERO_TAX // 영세
  EXEMPT_TAX // 면세
}

// enum.prisma

enum CommerceType {
  AMAZON
  NAVER
  INSTAGRAM
  COUPANG
  ALIEXPRESS
  ALIBABA
  STREET11
  GMARKET
  AUCTION
}

enum PriceUnit {
  KRW // 원
  USD // 달러
  JPY // 일본
  CNY // 중국
  EUR // 유로
}

// enum.prisma

// 사용자 역할
enum UserRole {
  ADMIN
  SYSTEM
  USER
  MANAGER
}

// 사용자 상태
enum UserStatus {
  ACTIVE
  INACTIVE
}

// 사용자 소셜 타입
enum UserSocialType {
  KAKAO
  GOOGLE
}

// 사용자 권한 상태
enum UserPermissionStatus {
  ALLOWED
  DENIED
}

// 사용자 권한 타입
enum UserPermissionType {
  READ
  WRITE
  ALL
}

// 사용자 키워드 상태
enum UserKeywordStatus {
  CREATED
  RUNNING
  STOPPED
  DONE
}// area-code.prisma

// 네이버 커머스 원산지 코드
model NaverCommerceAreaCode{
  id String @id @default(cuid())
  name String
  code String
  createdAt DateTime @default(now())
}

// category.prisma

// 사용자 회사 카테고리
model CommerceCategory {
  id        String   @id @default(cuid())
  code      String
  name      String?

  companyId String?
  company   UserCompany? @relation(fields: [companyId], references: [id])

  naverCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, companyId])

  templates CommerceTemplate[]
}

// 네이버 카테고리
model NaverCommerceCategory {
  id        String   @id @default(cuid())
  code      String @unique
  name      String?
  depth     Int?

  parentId  String?
  parent    NaverCommerceCategory? @relation("naverCommerceCategory_parent", fields: [parentId], references: [id])
  children  NaverCommerceCategory[] @relation("naverCommerceCategory_parent")

  createdAt DateTime @default(now())
}

// product.prisma

model CommerceProduct {
  id String @id @default(cuid())
  name String
  code String @default(cuid())
  content String? @db.Text
  price Int @default(0)
  quantity Int @default(0)
  keywords String @default("")
  areaCode String @default("etc")
  deliveryName String?
  deliveryType CommerceDeliveryType @default(PAID)
  deliveryCost Int @default(2500)
  taxType CommerceTaxType @default(TAX)
  manufacturerName String?
  brandName String?
  modelName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company UserCompany @relation(fields: [companyId], references: [id])
  categoryId String?
  category CommerceCategory? @relation(fields: [categoryId], references: [id])

  assets UserAsset[]

  @@unique([code, companyId])
}

// relation.prisma



// template.prisma

model CommerceTemplate {
  id String @id @default(cuid())
  name String
  content String @db.Text
  commerceType CommerceType

  companyId String
  company UserCompany @relation(fields: [companyId], references: [id])

  commerceCategoryId String?
  commerceCategory CommerceCategory? @relation(fields: [commerceCategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// product.prisma

// 제품
model Product {
  id                String       @id @default(cuid())
  title             String?
  name              String?
  thumbnailUrl      String?      @db.Text
  url               String?      @db.Text
  commerceProductId String?
  commerceType      CommerceType
  recentPrice       Float?       @db.Float
  recentSalePrice   Float?       @db.Float
  priceUnit         PriceUnit

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  details ProductDetail[]
  tags    TagOnProduct[]
}

// 제품 상세
model ProductDetail {
  id           String       @id @default(cuid())
  title        String?
  name         String?
  description  String?      @db.Text
  thumbnailUrl String?      @db.Text
  url          String?      @db.Text
  commerceType CommerceType
  price        Float?       @db.Float
  salePrice    Float?       @db.Float
  contents     String?      @db.Text
  priceUnit    PriceUnit

  createdAt DateTime @default(now())

  keywordId String
  keyword   UserKeyword @relation(fields: [keywordId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  tags   TagOnProductDetail[]
}

// 태그
model ProductTag {
  id  String @id @default(cuid())
  tag String

  products       TagOnProduct[]
  productDetails TagOnProductDetail[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}


// relation.prisma

// 태그 - 제품 N:N
model TagOnProduct {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tagId     String
  tag       ProductTag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
}

// 태그 - 제품 상세 N:N
model TagOnProductDetail {
  id              String        @id @default(cuid())
  productDetailId String
  productDetail   ProductDetail @relation(fields: [productDetailId], references: [id], onDelete: Cascade)
  tagId           String
  tag             ProductTag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productDetailId, tagId])
}


// relation.prisma

// 사용자 - 권한 N:N
model UserOnUserPermission {
  id           String           @id @default(cuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  permissionId String
  permission   UserPermission       @relation(fields: [permissionId], references: [id])
  status       UserPermissionStatus @default(ALLOWED)

  @@unique([userId, permissionId])
}

// 사용자 - 키워드 N:N
model UserOnUserKeyword {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  keywordId String
  keyword   UserKeyword @relation(fields: [keywordId], references: [id])

  @@unique([userId, keywordId])
}

// user-company.prisma

// 사용자 회사
model UserCompany {
  id             String  @id @default(cuid())
  name           String
  businessNumber String
  businessFileId String?
  businessFile   UserAsset?  @relation(fields: [businessFileId], references: [id])
  phoneNumber    String?
  address        String
  addressDetail  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  members        User[]                      @relation("userCompany_members")
  representative User?                       @relation("userCompany_representative")

  proxies    UserCompanyProxy[]
  apiKeys    UserCompanyCommerceApiKey[]
  categories CommerceCategory[]
  templates  CommerceTemplate[]
  products   CommerceProduct[]
}

// 사용자 회사 커머스 API KEY
model UserCompanyCommerceApiKey {
  id           String       @id @default(cuid())
  commerceType CommerceType
  apiKey       String
  apiSecret    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  company   UserCompany @relation(fields: [companyId], references: [id])
}

model UserCompanyProxy{
  id String @id @default(cuid())
  proxy String
  country String?
  usageCount Int @default(0)
  companyId String
  company UserCompany @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
}

// user.prisma

// 사용자
model User {
  id       String     @id @default(cuid())
  email    String     @unique
  nickname String     @unique
  role     UserRole   @default(USER)
  password String?
  apiKey   String?
  status   UserStatus @default(INACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  companyId               String?      @unique
  company                 UserCompany? @relation("userCompany_members", fields: [companyId], references: [id])
  representativeCompanyId String?      @unique
  representativeCompany   UserCompany? @relation("userCompany_representative", fields: [representativeCompanyId], references: [id])

  social      UserSocial[]
  assets      UserAsset[]
  keywords    UserOnUserKeyword[]
  permissions UserOnUserPermission[]
}

// 사용자 소셜
model UserSocial {
  id         String         @id @default(cuid())
  socialId   String
  socialType UserSocialType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

// 사용자 권한
model UserPermission {
  id        String         @id @default(cuid())
  name      String
  type      UserPermissionType @default(READ)
  createdAt DateTime       @default(now())

  users UserOnUserPermission[]

  @@unique([name, type])
}

// 사용자 키워드
model UserKeyword {
  id      String        @id @default(cuid())
  keyword String        @unique
  status  UserKeywordStatus @default(CREATED)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  following UserKeyword[] @relation("keyword_relation")
  follower  UserKeyword[] @relation("keyword_relation")

  users   UserOnUserKeyword[]
  details ProductDetail[]
}

// 사용자가 업로드 한 파일
model UserAsset {
  id   String @id @default(cuid())
  name String
  url  String @db.Text
  createdAt DateTime @default(now())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  businessFiles UserCompany[]
  commerceProducts CommerceProduct[]
}
