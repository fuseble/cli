import fs from "fs";
import yargs from "yargs";
import { getFiles as getAllFiles } from "./utils";
import chalk from "chalk";

export default class PrismaCLI {
  public static async getOptions() {
    const options = await yargs.usage(chalk.cyan(``)).options({
      path: {
        alias: "p",
        describe: "Path of the Root Prisma Module",
        type: "string",
        default: "./prisma/modules",
      },
    }).argv;

    return options;
  }

  public static async writePrismaSchema(options: any) {
    const path = options.path;
    if (!fs.existsSync(path)) {
      console.log(chalk.red(`Path ${path} does not exist`));
      process.exit(1);
    }

    const files = await this.getFiles(path);
    const result = await this.getPrismaFiles(files);

    const prismaFileExist = fs.existsSync("prisma/schema.prisma");
    if (prismaFileExist) {
      fs.unlinkSync("prisma/schema.prisma");
    }

    fs.writeFileSync("prisma/schema.prisma", result, "utf8");
  }

  public static async getFiles(path: string) {
    return await getAllFiles(path);
  }

  public static async getPrismaFiles(files: string[]) {
    let result = "// This file is generated by FUSEBLE.inc CLI\n\n";
    const rawResult: Array<{ file: string; fileName: string; text: string }> =
      [];

    for (const file of files) {
      const fileName = file.split("/").pop();
      const text = fs.readFileSync(file, "utf8");

      if (fileName?.includes(".prisma")) {
        rawResult.push({ file, fileName, text });
      }
    }

    const baseFile = rawResult.find((item) => item.fileName === "base.prisma");
    if (baseFile) {
      result = result + `${baseFile.text}\n\n`;
    }

    const enumFile = rawResult.filter(
      (item) => item.fileName === "enum.prisma"
    );
    if (Array.isArray(enumFile) && enumFile.length > 0) {
      result =
        result +
        enumFile
          .map((item) => `// ${item.fileName}\n\n${item.text}`)
          .join("\n\n");
    }

    const modelFile = rawResult.filter(
      (item) =>
        item.fileName !== "base.prisma" && item.fileName !== "enum.prisma"
    );
    if (Array.isArray(modelFile) && modelFile.length > 0) {
      result =
        result +
        modelFile
          .map((item) => `// ${item.fileName}\n\n${item.text}`)
          .join("\n\n");
    }

    return result;
  }
}
